# Generated from ./aspect/core/languages/aql/Aql.g4 by ANTLR 4.6
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2)")
        buf.write("\u0105\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\3\3")
        buf.write("\3\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\b\3\b")
        buf.write("\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16")
        buf.write("\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3")
        buf.write("(\3(\3)\3)\3)\7)\u00c5\n)\f)\16)\u00c8\13)\3*\6*\u00cb")
        buf.write("\n*\r*\16*\u00cc\3+\3+\5+\u00d1\n+\3+\3+\3,\3,\3,\3,\3")
        buf.write(",\3-\3-\3-\3-\3.\3.\3/\3/\3\60\3\60\3\60\3\60\5\60\u00e6")
        buf.write("\n\60\3\60\3\60\3\60\5\60\u00eb\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u00f0\n\60\3\61\6\61\u00f3\n\61\r\61\16\61\u00f4\3")
        buf.write("\61\3\61\3\62\3\62\3\62\3\62\7\62\u00fd\n\62\f\62\16\62")
        buf.write("\u0100\13\62\3\62\3\62\5\62\u0104\n\62\2\2\63\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C\2E\2G\2I\2K\2M\2O\2Q\2")
        buf.write("S\2U\2W#Y$[%]&_\'a(c)\3\2\13\4\2CCcc\4\2UUuu\4\2EEee\4")
        buf.write("\2FFff\4\2GGgg\5\2C\\aac|\4\2--//\5\2\13\f\17\17\"\"\5")
        buf.write("\2\f\f\17\17))\u0106\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2")
        buf.write("\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2")
        buf.write("\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31")
        buf.write("\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
        buf.write("\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3")
        buf.write("\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2")
        buf.write("\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3")
        buf.write("\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[")
        buf.write("\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\3")
        buf.write("e\3\2\2\2\5g\3\2\2\2\7i\3\2\2\2\tk\3\2\2\2\13n\3\2\2\2")
        buf.write("\rq\3\2\2\2\17t\3\2\2\2\21v\3\2\2\2\23x\3\2\2\2\25z\3")
        buf.write("\2\2\2\27|\3\2\2\2\31\177\3\2\2\2\33\u0082\3\2\2\2\35")
        buf.write("\u0084\3\2\2\2\37\u0086\3\2\2\2!\u0089\3\2\2\2#\u008c")
        buf.write("\3\2\2\2%\u008e\3\2\2\2\'\u0090\3\2\2\2)\u0092\3\2\2\2")
        buf.write("+\u0094\3\2\2\2-\u0096\3\2\2\2/\u0098\3\2\2\2\61\u009d")
        buf.write("\3\2\2\2\63\u00a3\3\2\2\2\65\u00a5\3\2\2\2\67\u00a7\3")
        buf.write("\2\2\29\u00a9\3\2\2\2;\u00ab\3\2\2\2=\u00ad\3\2\2\2?\u00af")
        buf.write("\3\2\2\2A\u00b1\3\2\2\2C\u00b3\3\2\2\2E\u00b5\3\2\2\2")
        buf.write("G\u00b7\3\2\2\2I\u00b9\3\2\2\2K\u00bb\3\2\2\2M\u00bd\3")
        buf.write("\2\2\2O\u00bf\3\2\2\2Q\u00c1\3\2\2\2S\u00ca\3\2\2\2U\u00ce")
        buf.write("\3\2\2\2W\u00d4\3\2\2\2Y\u00d9\3\2\2\2[\u00dd\3\2\2\2")
        buf.write("]\u00df\3\2\2\2_\u00ef\3\2\2\2a\u00f2\3\2\2\2c\u00f8\3")
        buf.write("\2\2\2ef\7\60\2\2f\4\3\2\2\2gh\7]\2\2h\6\3\2\2\2ij\7_")
        buf.write("\2\2j\b\3\2\2\2kl\7\60\2\2lm\7B\2\2m\n\3\2\2\2no\7~\2")
        buf.write("\2op\7~\2\2p\f\3\2\2\2qr\7(\2\2rs\7(\2\2s\16\3\2\2\2t")
        buf.write("u\7~\2\2u\20\3\2\2\2vw\7`\2\2w\22\3\2\2\2xy\7(\2\2y\24")
        buf.write("\3\2\2\2z{\7?\2\2{\26\3\2\2\2|}\7#\2\2}~\7?\2\2~\30\3")
        buf.write("\2\2\2\177\u0080\7?\2\2\u0080\u0081\7\u0080\2\2\u0081")
        buf.write("\32\3\2\2\2\u0082\u0083\7@\2\2\u0083\34\3\2\2\2\u0084")
        buf.write("\u0085\7>\2\2\u0085\36\3\2\2\2\u0086\u0087\7@\2\2\u0087")
        buf.write("\u0088\7?\2\2\u0088 \3\2\2\2\u0089\u008a\7>\2\2\u008a")
        buf.write("\u008b\7?\2\2\u008b\"\3\2\2\2\u008c\u008d\7-\2\2\u008d")
        buf.write("$\3\2\2\2\u008e\u008f\7/\2\2\u008f&\3\2\2\2\u0090\u0091")
        buf.write("\7,\2\2\u0091(\3\2\2\2\u0092\u0093\7\61\2\2\u0093*\3\2")
        buf.write("\2\2\u0094\u0095\7#\2\2\u0095,\3\2\2\2\u0096\u0097\7\u0080")
        buf.write("\2\2\u0097.\3\2\2\2\u0098\u0099\7v\2\2\u0099\u009a\7t")
        buf.write("\2\2\u009a\u009b\7w\2\2\u009b\u009c\7g\2\2\u009c\60\3")
        buf.write("\2\2\2\u009d\u009e\7h\2\2\u009e\u009f\7c\2\2\u009f\u00a0")
        buf.write("\7n\2\2\u00a0\u00a1\7u\2\2\u00a1\u00a2\7g\2\2\u00a2\62")
        buf.write("\3\2\2\2\u00a3\u00a4\7&\2\2\u00a4\64\3\2\2\2\u00a5\u00a6")
        buf.write("\7*\2\2\u00a6\66\3\2\2\2\u00a7\u00a8\7+\2\2\u00a88\3\2")
        buf.write("\2\2\u00a9\u00aa\7B\2\2\u00aa:\3\2\2\2\u00ab\u00ac\7<")
        buf.write("\2\2\u00ac<\3\2\2\2\u00ad\u00ae\7.\2\2\u00ae>\3\2\2\2")
        buf.write("\u00af\u00b0\7}\2\2\u00b0@\3\2\2\2\u00b1\u00b2\7\177\2")
        buf.write("\2\u00b2B\3\2\2\2\u00b3\u00b4\t\2\2\2\u00b4D\3\2\2\2\u00b5")
        buf.write("\u00b6\t\3\2\2\u00b6F\3\2\2\2\u00b7\u00b8\t\4\2\2\u00b8")
        buf.write("H\3\2\2\2\u00b9\u00ba\t\5\2\2\u00baJ\3\2\2\2\u00bb\u00bc")
        buf.write("\t\6\2\2\u00bcL\3\2\2\2\u00bd\u00be\4\62;\2\u00beN\3\2")
        buf.write("\2\2\u00bf\u00c0\t\7\2\2\u00c0P\3\2\2\2\u00c1\u00c6\5")
        buf.write("O(\2\u00c2\u00c5\5O(\2\u00c3\u00c5\5M\'\2\u00c4\u00c2")
        buf.write("\3\2\2\2\u00c4\u00c3\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6")
        buf.write("\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7R\3\2\2\2\u00c8")
        buf.write("\u00c6\3\2\2\2\u00c9\u00cb\4\62;\2\u00ca\u00c9\3\2\2\2")
        buf.write("\u00cb\u00cc\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3")
        buf.write("\2\2\2\u00cdT\3\2\2\2\u00ce\u00d0\5K&\2\u00cf\u00d1\t")
        buf.write("\b\2\2\u00d0\u00cf\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2")
        buf.write("\3\2\2\2\u00d2\u00d3\5S*\2\u00d3V\3\2\2\2\u00d4\u00d5")
        buf.write("\5I%\2\u00d5\u00d6\5K&\2\u00d6\u00d7\5E#\2\u00d7\u00d8")
        buf.write("\5G$\2\u00d8X\3\2\2\2\u00d9\u00da\5C\"\2\u00da\u00db\5")
        buf.write("E#\2\u00db\u00dc\5G$\2\u00dcZ\3\2\2\2\u00dd\u00de\5Q)")
        buf.write("\2\u00de\\\3\2\2\2\u00df\u00e0\5S*\2\u00e0^\3\2\2\2\u00e1")
        buf.write("\u00e2\5S*\2\u00e2\u00e3\7\60\2\2\u00e3\u00e5\5S*\2\u00e4")
        buf.write("\u00e6\5U+\2\u00e5\u00e4\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6")
        buf.write("\u00f0\3\2\2\2\u00e7\u00e8\7\60\2\2\u00e8\u00ea\5S*\2")
        buf.write("\u00e9\u00eb\5U+\2\u00ea\u00e9\3\2\2\2\u00ea\u00eb\3\2")
        buf.write("\2\2\u00eb\u00f0\3\2\2\2\u00ec\u00ed\5S*\2\u00ed\u00ee")
        buf.write("\5U+\2\u00ee\u00f0\3\2\2\2\u00ef\u00e1\3\2\2\2\u00ef\u00e7")
        buf.write("\3\2\2\2\u00ef\u00ec\3\2\2\2\u00f0`\3\2\2\2\u00f1\u00f3")
        buf.write("\t\t\2\2\u00f2\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6\3\2\2\2")
        buf.write("\u00f6\u00f7\b\61\2\2\u00f7b\3\2\2\2\u00f8\u00fe\7)\2")
        buf.write("\2\u00f9\u00fa\7)\2\2\u00fa\u00fd\7)\2\2\u00fb\u00fd\n")
        buf.write("\n\2\2\u00fc\u00f9\3\2\2\2\u00fc\u00fb\3\2\2\2\u00fd\u0100")
        buf.write("\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff")
        buf.write("\u0103\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0104\7)\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u0101\3\2\2\2\u0103\u0102\3")
        buf.write("\2\2\2\u0104d\3\2\2\2\16\2\u00c4\u00c6\u00cc\u00d0\u00e5")
        buf.write("\u00ea\u00ef\u00f4\u00fc\u00fe\u0103\3\b\2\2")
        return buf.getvalue()


class AqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    DESC = 33
    ASC = 34
    IDENTIFIER = 35
    INTEGER = 36
    FLOAT = 37
    WS = 38
    STRING_LITERAL = 39

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'['", "']'", "'.@'", "'||'", "'&&'", "'|'", "'^'", "'&'", 
            "'='", "'!='", "'=~'", "'>'", "'<'", "'>='", "'<='", "'+'", 
            "'-'", "'*'", "'/'", "'!'", "'~'", "'true'", "'false'", "'$'", 
            "'('", "')'", "'@'", "':'", "','", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "DESC", "ASC", "IDENTIFIER", "INTEGER", "FLOAT", "WS", "STRING_LITERAL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "A", "S", "C", "D", "E", "DIGIT", "IDKEY", "ID", "INT", 
                  "EXPONENT", "DESC", "ASC", "IDENTIFIER", "INTEGER", "FLOAT", 
                  "WS", "STRING_LITERAL" ]

    grammarFileName = "Aql.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


